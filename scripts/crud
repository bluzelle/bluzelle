#!/usr/bin/env python2.7

# Copyright (C) 2018 Bluzelle
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License, version 3,
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# To generate Python bindings:
#
# cd proto
# protoc --python_out=../scripts ./*.proto
#

import websocket
import sys
import random
from argparse import ArgumentParser
from argparse import RawDescriptionHelpFormatter

try:
    import bluzelle_pb2
    import database_pb2
    import pbft_pb2
    import status_pb2
except ImportError as e:
    raise ImportError("{}\n\nTo generate Bluzelle protobuf modules:\n"
                      "\n"
                      "$ cd proto\n"
                      "$ protoc --python_out=../scripts ./*.proto\n".format(e.message))

nonce = 0
CRUD_SCRIPT_SWARM_ID = ""
CRUD_SCRIPT_SENDER_ID = "crud-script"

def handle_response(ws):
    print("-" * 60 + '\n')

    env = bluzelle_pb2.bzn_envelope()
    env.ParseFromString(ws.recv())

    resp = database_pb2.database_response()
    resp.ParseFromString(env.database_response)

    if resp.WhichOneof('response') == 'redirect':
        redirect_node = "{}:{}".format(resp.redirect.leader_host, resp.redirect.leader_port)
        print("redirecting to leader at {}...\n".format(redirect_node).expandtabs(4))
        resp = send_request(redirect_node, uuid, msg)
    else:
        print("Response: \n{}".format(resp).expandtabs(4))
        print("-" * 60 + '\n')


def send_request(node, uuid, msg, loop=False, ws=None):
    global nonce
    global CRUD_SCRIPT_SWARM_ID
    global CRUD_SCRIPT_SENDER_ID

    if not ws:
        ws = websocket.create_connection("ws://" + node)
    msg.header.db_uuid = uuid

    # hack!
    if nonce != 0:
        msg.header.nonce = nonce
    else:
        msg.header.nonce = random.randint(1,sys.maxint)

    msg_outer = bluzelle_pb2.bzn_envelope()
    msg_outer.database_msg = msg.SerializeToString()
    msg_outer.swarm_id = CRUD_SCRIPT_SWARM_ID
    msg_outer.sender = CRUD_SCRIPT_SENDER_ID

    ws.send_binary(msg_outer.SerializeToString())
    resp = handle_response(ws)

    if loop:
        while 1:
            try:
                print("Waiting....\n")
                resp = bluzelle_pb2.bzn_envelope()
                resp.ParseFromString(ws.recv())
                database_resp = database_pb2.database_response()
                database_resp.ParseFromString(resp.database_msg)
                print("Response: \n{}".format(database_resp).expandtabs(4))
                print("-" * 60 + '\n')
            except KeyboardInterrupt:
                break
        return ws

    #ws.close()

    return resp


def send_status_request(node):
    ws = websocket.create_connection("ws://" + args.node)
    msg_outer = bluzelle_pb2.bzn_envelope()
    msg_inner = status_pb2.status_request()
    msg_outer.swarm_id = CRUD_SCRIPT_SWARM_ID
    msg_outer.sender = CRUD_SCRIPT_SENDER_ID
    msg_outer.status_request = msg_inner.SerializeToString()

    print("Sending: \n{}".format(msg_outer).expandtabs(4))
    ws.send_binary(msg_outer.SerializeToString())

    env = bluzelle_pb2.bzn_envelope()
    env.ParseFromString(ws.recv())
    resp = status_pb2.status_response()
    resp.ParseFromString(env.status_response)
    print("Response: \n{}".format(resp).expandtabs(4))
    print("Response: \n{}".format(resp.module_status_json).expandtabs(4))
    print("-" * 60 + '\n')

    return resp


def create_db_request(max_size):
    msg = database_pb2.database_msg()
    msg.create_db.SetInParent()
    msg.create_db.max_size = max_size
    return msg

def update_db_request(max_size):
    msg = database_pb2.database_msg()
    msg.update_db.SetInParent()
    msg.update_db.max_size = max_size
    return msg

def delete_db_request():
    msg = database_pb2.database_msg()
    msg.delete_db.SetInParent()
    return msg


def has_db_request():
    msg = database_pb2.database_msg()
    msg.has_db.SetInParent()
    return msg


def writers_request():
    msg = database_pb2.database_msg()
    msg.writers.SetInParent()
    return msg


def add_writer_request(writer):
    msg = database_pb2.database_msg()
    msg.add_writers.SetInParent()
    msg.add_writers.writers.append(writer)
    return msg


def remove_writer_request(writer):
    msg = database_pb2.database_msg()
    msg.remove_writers.SetInParent()
    msg.remove_writers.writers.append(writer)
    return msg


def create_request(key, value, expire):
    msg = database_pb2.database_msg()
    msg.create.key = key
    msg.create.value = value
    msg.create.expire = expire
    return msg


def read_request(key):
    msg = database_pb2.database_msg()
    msg.read.key = key
    return msg


def quick_read_request(key):
    msg = database_pb2.database_msg()
    msg.quick_read.key = key
    return msg


def update_request(key, value, expire):
    msg = database_pb2.database_msg()
    msg.update.key = key
    msg.update.value = value
    msg.update.expire = expire;
    return msg


def delete_request(key):
    msg = database_pb2.database_msg()
    msg.delete.key = key
    return msg


def has_request(key):
    msg = database_pb2.database_msg()
    msg.has.key = key
    return msg


def ttl_request(key):
    msg = database_pb2.database_msg()
    msg.ttl.key = key
    return msg


def persist_request(key):
    msg = database_pb2.database_msg()
    msg.persist.key = key
    return msg


def expire_request(key, expire):
    msg = database_pb2.database_msg()
    msg.expire.key = key
    msg.expire.expire = expire
    return msg


def keys_request():
    msg = database_pb2.database_msg()
    msg.keys.SetInParent()
    return msg


def size_request():
    msg = database_pb2.database_msg()
    msg.size.SetInParent()
    return msg


def subscribe_request(key):
    msg = database_pb2.database_msg()
    msg.subscribe.key = key
    return msg


def unsubscribe_request(key):
    global nonce
    msg = database_pb2.database_msg()
    msg.unsubscribe.key = key
    msg.unsubscribe.nonce = nonce
    return msg


def status_handler(args):
    return send_status_request(args.node)


def create_db_handler(args):
    return send_request(args.node, args.uuid, create_db_request(args.max_size))


def update_db_handler(args):
    return send_request(args.node, args.uuid, update_db_request(args.max_size))

def delete_db_handler(args):
    return send_request(args.node, args.uuid, delete_db_request())


def has_db_handler(args):
    return send_request(args.node, args.uuid, has_db_request())


def writers_handler(args):
    return send_request(args.node, args.uuid, writers_request())


def add_writer_handler(args):
    return send_request(args.node, args.uuid, add_writer_request(args.writer))


def remove_writer_handler(args):
    return send_request(args.node, args.uuid, remove_writer_request(args.writer))


def create_handler(args):
    return send_request(args.node, args.uuid, create_request(args.key, args.value, args.expire))


def update_handler(args):
    return send_request(args.node, args.uuid, update_request(args.key, args.value, args.expire))


def read_handler(args):
    return send_request(args.node, args.uuid, read_request(args.key))


def qread_handler(args):
    return send_request(args.node, args.uuid, quick_read_request(args.key))


def delete_handler(args):
    return send_request(args.node, args.uuid, delete_request(args.key))


def has_handler(args):
    return send_request(args.node, args.uuid, has_request(args.key))


def ttl_handler(args):
    return send_request(args.node, args.uuid, ttl_request(args.key))


def persist_handler(args):
    return send_request(args.node, args.uuid, persist_request(args.key))


def expire_handler(args):
    return  send_request(args.node, args.uuid, expire_request(args.key, args.expire))


def keys_handler(args):
    return send_request(args.node, args.uuid, keys_request())


def size_handler(args):
    return send_request(args.node, args.uuid, size_request())


def subscribe_handler(args):
    global nonce
    nonce = random.randint(1,sys.maxint)
    return send_request(args.node, args.uuid, unsubscribe_request(args.key),
                        ws=send_request(args.node, args.uuid, subscribe_request(args.key), True))


if __name__ == "__main__":

    parser = ArgumentParser(description="crud", formatter_class=RawDescriptionHelpFormatter)

    parser.add_argument("-s", "--swarm_id", type=str, default="0", help="Target swarm id (default 0)", required=False)

    parser.add_argument("-i", "--id", type=str, default="0", help="Crud script sender id (default 0)", required=False)

    required = parser.add_argument_group('required arguments')

    required.add_argument("-n", "--node", type=str, default=None, help="node's address (ex. 127.0.0.1:51010)", required=True)

    subparsers = parser.add_subparsers()

    # Status
    status_parser = subparsers.add_parser('status', help="Status")
    status_parser.set_defaults(func=status_handler)

    # Create db
    create_db_parser = subparsers.add_parser('create-db', help="Create database")
    create_db_group = create_db_parser.add_argument_group('required arguments')
    create_db_group.add_argument("-u", "--uuid",  type=str, default=None, help="uuid", required=True)
    create_db_group.add_argument("-s", "--max-size",  type=int, default=0, help="max-size", required=False)
    create_db_parser.set_defaults(func=create_db_handler)

    # Update db
    update_db_parser = subparsers.add_parser('update-db', help="Update database max size")
    update_db_group = update_db_parser.add_argument_group('required arguments')
    update_db_group.add_argument("-u", "--uuid",  type=str, default=None, help="uuid", required=True)
    update_db_group.add_argument("-s", "--max-size",  type=int, default=0, help="max-size", required=False)
    update_db_parser.set_defaults(func=update_db_handler)

    # Delete db
    delete_db_parser = subparsers.add_parser('delete-db', help="Delete database")
    delete_db_group = delete_db_parser.add_argument_group('required arguments')
    delete_db_group.add_argument("-u", "--uuid",  type=str, default=None, help="uuid", required=True)
    delete_db_parser.set_defaults(func=delete_db_handler)

    # Has db
    has_db_parser = subparsers.add_parser('has-db', help="Has database")
    has_db_group = has_db_parser.add_argument_group('required arguments')
    has_db_group.add_argument("-u", "--uuid",  type=str, default=None, help="uuid", required=True)
    has_db_parser.set_defaults(func=has_db_handler)

    # Writers
    writers_parser = subparsers.add_parser('writers', help="Database writers")
    writers_group = writers_parser.add_argument_group('required arguments')
    writers_group.add_argument("-u", "--uuid",  type=str, default=None, help="uuid", required=True)
    writers_parser.set_defaults(func=writers_handler)

    # Add writer
    add_writers_parser = subparsers.add_parser('add-writer', help="Add database writers")
    add_writers_group = add_writers_parser.add_argument_group('required arguments')
    add_writers_group.add_argument("-u", "--uuid",  type=str, default=None, help="uuid", required=True)
    add_writers_group.add_argument("-w", "--writer",  type=str, default=None, help="uuid", required=True)
    add_writers_parser.set_defaults(func=add_writer_handler)

    # Remove writer
    remove_writers_parser = subparsers.add_parser('remove-writer', help="Remove database writers")
    remove_writers_group = remove_writers_parser.add_argument_group('required arguments')
    remove_writers_group.add_argument("-u", "--uuid",  type=str, default=None, help="uuid", required=True)
    remove_writers_group.add_argument("-w", "--writer",  type=str, default=None, help="uuid", required=True)
    remove_writers_parser.set_defaults(func=remove_writer_handler)

    # Create
    create_parser = subparsers.add_parser('create', help="Create k/v")
    create_group = create_parser.add_argument_group('required arguments')
    create_group.add_argument("-u", "--uuid",  type=str, default=None, help="uuid", required=True)
    create_group.add_argument("-k", "--key",   type=str, default=None, help="key", required=True)
    create_group.add_argument("-ex", "--expire", type=int, default=0, help="key", required=False)
    group = create_group.add_mutually_exclusive_group()
    group.add_argument("-v", "--value", type=str, default="", help="value")
    group.add_argument("-f", "--file",  type=str, default=None, help="file to upload")
    create_parser.set_defaults(func=create_handler)

    # Read
    read_parser = subparsers.add_parser('read', help="Read k/v")
    read_group = read_parser.add_argument_group('required arguments')
    read_group.add_argument("-k", "--key",   type=str, default=None, help="key", required=True)
    read_group.add_argument("-u", "--uuid",  type=str, default=None, help="uuid", required=True)
    read_parser.add_argument("-s", "--save", type=str, default=None, help="save to file")
    read_parser.set_defaults(func=read_handler)

    # Quick read
    qread_parser = subparsers.add_parser('qread', help="Quick read k/v")
    qread_group = qread_parser.add_argument_group('required arguments')
    qread_group.add_argument("-k", "--key",   type=str, default=None, help="key", required=True)
    qread_group.add_argument("-u", "--uuid",  type=str, default=None, help="uuid", required=True)
    qread_parser.add_argument("-s", "--save", type=str, default=None, help="save to file")
    qread_parser.set_defaults(func=qread_handler)

    # Update
    update_parser = subparsers.add_parser('update', help="Update k/v")
    update_group = update_parser.add_argument_group('required arguments')
    update_group.add_argument("-k", "--key",   type=str, default=None, help="key", required=True)
    update_group.add_argument("-u", "--uuid",  type=str, default=None, help="uuid", required=True)
    update_group.add_argument("-ex", "--expire", type=int, default=0, help="expire in seconds")
    update = update_group.add_mutually_exclusive_group()
    update.add_argument("-v", "--value", type=str, default=None, help="value")
    update.add_argument("-f", "--file",  type=str, default=None,  help="file to upload")
    update_parser.set_defaults(func=update_handler)

    # delete
    delete_parser = subparsers.add_parser('delete', help="Delete k/v")
    delete_group = delete_parser.add_argument_group('required arguments')
    delete_group.add_argument("-k", "--key",   type=str, default=None, help="key", required=True)
    delete_group.add_argument("-u", "--uuid",  type=str, default=None, help="uuid", required=True)
    delete_parser.set_defaults(func=delete_handler)

    # has
    has_parser = subparsers.add_parser('has', help="Determine whether a key exists within a DB by UUID")
    has_group = has_parser.add_argument_group('requred arguments')
    has_group.add_argument("-k", "--key",   type=str, default=None, help="key", required=True)
    has_group.add_argument("-u", "--uuid",  type=str, default=None, help="uuid", required=True)
    has_parser.set_defaults(func=has_handler)

    # ttl
    ttl_parser = subparsers.add_parser('ttl', help="Get ttl for a key within a DB by UUID")
    ttl_group = ttl_parser.add_argument_group('required arguments')
    ttl_group.add_argument("-k", "--key",   type=str, default=None, help="key", required=True)
    ttl_group.add_argument("-u", "--uuid",  type=str, default=None, help="uuid", required=True)
    ttl_parser.set_defaults(func=ttl_handler)

    # persist
    persist_parser = subparsers.add_parser('persist', help="Remove expiration for a key within a DB by UUID")
    persist_group = persist_parser.add_argument_group('required arguments')
    persist_group.add_argument("-k", "--key",   type=str, default=None, help="key", required=True)
    persist_group.add_argument("-u", "--uuid",  type=str, default=None, help="uuid", required=True)
    persist_parser.set_defaults(func=persist_handler)

    # expire
    expire_parser = subparsers.add_parser('expire', help="Set expire for a key within a DB by UUID")
    expire_group = expire_parser.add_argument_group('required arguments')
    expire_group.add_argument("-k", "--key",   type=str, default=None, help="key", required=True)
    expire_group.add_argument("-u", "--uuid",  type=str, default=None, help="uuid", required=True)
    expire_group.add_argument("-ex", "--expire", type=int, default=0, help="expire in seconds")
    expire_parser.set_defaults(func=expire_handler)

    # keys
    keys_parser = subparsers.add_parser('keys', help="Get all keys for a DB by UUID")
    keys_parser.add_argument("-u", "--uuid",  type=str, default=None, help="uuid", required=True)
    keys_parser.set_defaults(func=keys_handler)

    # size
    size_parser = subparsers.add_parser('size', help="Determine the size of the DB by UUID")
    size_parser.add_argument("-u", "--uuid",  type=str, default=None, help="uuid", required=True)
    size_parser.set_defaults(func=size_handler)

    # subscribe
    subscribe_parser = subparsers.add_parser('subscribe', help="Subscribe and monitor changes for a key")
    subscribe_parser.add_argument("-u", "--uuid",  type=str, default=None, help="uuid", required=True)
    subscribe_parser.add_argument("-k", "--key",   type=str, default=None, help="key", required=True)
    subscribe_parser.set_defaults(func=subscribe_handler)

    args = parser.parse_args()
    
    try:
        if args.file:
            # if user gave us a file we need to read it as our value
            args.value = open(args.file).read()
    except IOError as e:
        print("failed to read value from file: {}".format(e.strerror))
        exit(1)
    except AttributeError:
        # no input file specified. Value was passed via command line
        pass

    CRUD_SCRIPT_SWARM_ID = args.swarm_id

    CRUD_SCRIPT_SENDER_ID += "-" + args.id
    print("\nClient: " + CRUD_SCRIPT_SENDER_ID)

    resp = args.func(args)

    try:
        # save to a file...
        if args.save:
            with open(args.save, "w") as outfile:
                outfile.write(str(resp.resp.value))
    except AttributeError:
        # no output file specified. Result will be printed to console
        pass

    exit(0)
